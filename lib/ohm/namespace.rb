=begin

Adds a key tag to all the keys generated by a given model that
includes this module. All the keys sharing the same key tag will
be stored in the same Redis Cluster node. If you know which key tag
will hash to the node you are connected to, then you can use Ohm
with Redis Cluster.

To get an overview of how this module works, here's an example of
how you would add key tags to your models without any syntax sugar:

    class Post < Ohm::Model
      def self.name
        "{foo}::#{super}"
      end
    end

As Ohm uses the name of a module for creating the keys, by prepending
a key tag (the string "{foo}" in the example) you are guaranteed
to get those key tags in every key created. After all your models
are configured with the same key tag, you can use Ohm normally.

Important: it's worth insisting that the hashed key tag must resolve
to the node you want to connect to. If that's not the case, you
will get some silent errors because the Lua scripts in Ohm won't
be able to use the keys.

In order to use Ohm with Redis Cluster, you can use Redic, as usual,
but you can also use Redic Cluster. By using Redic Cluster, you
don't get any extra features in Ohm, but having a cluster aware
client may come handy for running adminstrative tasks. In order to
use Ohm with Redic Cluster, install the `redic-cluster` gem and use
it as the client:

    require "ohm"
    require "redic/cluster"

    Ohm.redis = Redic::Cluster.new("redis://localhost:12001")

# Usage

Include `Ohm::Namespace` in your model:

    require "ohm"
    require "ohm/namespace"

    class Post < Ohm::Model
      extend Ohm::Namespace

      namespace :foo
    end

Make sure you use the same tag in all related models.

=end
module Ohm
  module Namespace
    def namespace(tag)
      @namespace = tag
    end

    def name
      if defined?(@namespace)
        sprintf("{%s}::%s", @namespace, super)
      else
        super
      end
    end
  end
end
